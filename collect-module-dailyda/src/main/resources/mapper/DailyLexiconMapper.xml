<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tzj.collect.mapper.DailyLexiconMapper" >
	<select id="existTable" parameterType="String" resultType="Integer">
        select count(*)
        from information_schema.TABLES
        where LCASE(table_name)=#{tableName}
    </select>

	<update id="createNewTable" parameterType="String">
        CREATE TABLE  ${tableName} (
		  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
		  `uu_id` varchar(100) DEFAULT NULL COMMENT 'uuId',
		  `ali_user_id` varchar(100) DEFAULT NULL COMMENT '阿里会员id',
		  `lexicon_id` int(11) NOT NULL COMMENT '答题id',
		  `type_id` smallint(3) NOT NULL COMMENT '原有答案',
		  `user_type_id` smallint(3) DEFAULT NULL COMMENT '用户输入答案',
		  `is_true` smallint(3) DEFAULT '1' COMMENT '正确与否(0:正确, 1:错误)',
		  `score_` smallint(3) DEFAULT '0' COMMENT '获得积分',
		  `create_by` varchar(50) DEFAULT NULL COMMENT '创建者',
		  `create_date` datetime NOT NULL COMMENT '创建时间',
		  `update_by` varchar(50) DEFAULT NULL COMMENT '更新者',
		  `update_date` datetime NOT NULL COMMENT '更新时间',
		  `remarks` varchar(255) DEFAULT NULL COMMENT '备注信息',
		  `del_flag` char(1) NOT NULL DEFAULT '0' COMMENT '删除标记',
		  `version_` int(11) DEFAULT '1' COMMENT '当前版本号',
		  PRIMARY KEY (`id`)
		) ENGINE=InnoDB AUTO_INCREMENT=82 DEFAULT CHARSET=utf8mb4 COMMENT='每日答题记录流水(每人每日记录一次),按周分表';
    </update>


	<select id="lexiconList" resultMap="getCheckMap">
        SELECT depth FROM daily_lexicon WHERE del_flag = 0 GROUP BY depth
    </select>
	<select id="selectDepth" resultType="Map">
        SELECT id,name_,type_id,depth FROM daily_lexicon WHERE del_flag = 0 and  depth =  #{depth}
    </select>
	<resultMap id="getCheckMap" type="map">
		<result property="depth" column="depth"/>
		<collection property="depthList" javaType="ArrayList" ofType="Map"
					select="selectDepth" column="{depth=depth}">
			<result property="id" column="id" />
			<result property="name" column="name_"/>
			<result property="typeId" column="type_id"/>
			<result property="depth" column="depth"/>
		</collection>
	</resultMap>
	<insert id="insertDailyRecords" parameterType="String">
        INSERT INTO ${tableName} (
			`uu_id`,
			`ali_user_id`,
			`lexicon_id`,
			`type_id`,
			`create_date`,
			`update_date`
		)
		VALUES
			(
				#{uuId},
				#{aliUserId},
				#{lexiconId},
				#{typeId},
				NOW(),
				NOW()
			);
	</insert>
	<update id="updateDailyRecordsList" parameterType="String">
		UPDATE ${tableName}
			SET user_type_id = #{typeId},
			is_true = #{trueOrFalse},
			version_ = version_ + 1,
			 update_date = NOW()
			WHERE
				ali_user_id = #{aliUserId}
			AND uu_id = #{uuId}
			AND create_date BETWEEN #{localDateBefore}
			AND #{localDateEnd}

	</update>
	<select id="checkDailyIsAnswer" resultType="Map">
		SELECT
			uu_id,
			ali_user_id,
			type_id
		FROM
			${tableName}
		WHERE
			del_flag = 0
		AND uu_id = #{uuId}
		AND user_type_id IS NULL
	</select>
	<select id="dailyLexiconList" resultType="Map">
		SELECT
			dll.depth,
			ddr.uu_id AS uuId,
			dll.name_
		FROM
			${tableName} ddr
		LEFT JOIN daily_lexicon dll ON ddr.lexicon_id = dll.id
		WHERE
			ddr.del_flag = 0
		AND ddr.ali_user_id = #{aliUserId}
		AND ddr.create_date BETWEEN #{localDateBefore}
		AND #{localDateEnd}
	</select>
	<select id="isAnswerDaily" resultType="Map">
		SELECT
			dll.depth,
			ddr.uu_id AS uuId,
			dll.name_
		FROM
			${tableName} ddr
		LEFT JOIN daily_lexicon dll ON ddr.lexicon_id = dll.id
		WHERE
			ddr.del_flag = 0
		AND ddr.user_type_id IS NOT NULL
		AND ddr.ali_user_id = #{aliUserId}
		AND ddr.create_date BETWEEN #{localDateBefore}
		AND #{localDateEnd}
	</select>
	<select id="errorLexiconList" resultMap="lexResultMap">
		SELECT
			dll.name_,
			ddr.type_id,
			ddr.user_type_id
		FROM
			${tableName} ddr
		LEFT JOIN daily_lexicon dll ON ddr.lexicon_id = dll.id
		WHERE
			ddr.del_flag = 0
		AND ddr.ali_user_id = #{aliUserId}
		AND ddr.is_true = 1
		AND ddr.create_date BETWEEN #{localDateBefore}
		AND #{localDateEnd}
		order by  ddr.user_type_id DESC
	</select>
	<resultMap id="lexResultMap" type="com.tzj.collect.api.lexicon.result.LexResult">
		<result  property="name" column="name_"/>
		<result property="lexType" column="type_id" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/>
		<result property="userLexType" column="user_type_id" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/>
	</resultMap>

	<select id="lexiconListByAliUserId" resultMap="getCheckMapUser" >
        SELECT
            DISTINCT
            dll.depth,
            ddr.ali_user_id as aliUserId,
            #{localDateBefore} as localDateBefore,
            #{localDateEnd} as localDateEnd,
            #{tableName} as  tableName
        FROM
             ${tableName} ddr
        LEFT JOIN daily_lexicon dll ON ddr.lexicon_id = dll.id
        WHERE
            ddr.ali_user_id = #{aliUserId}
        AND ddr.create_date BETWEEN #{localDateBefore}
		AND #{localDateEnd}
	</select>

	<select id="selectDepthDailyUser" resultType="Map" >
        SELECT
            ddr.uu_id,
            dll.type_id,
            dll.name_,
            dll.depth,
            ddr.user_type_id
        FROM
            ${tableName} ddr
        LEFT JOIN daily_lexicon dll ON ddr.lexicon_id = dll.id
        WHERE
            ddr.ali_user_id = #{aliUserId}
        AND dll.depth = #{depth}
        AND ddr.create_date BETWEEN #{localDateBefore}
		AND #{localDateEnd}

    </select>
	<resultMap id="getCheckMapUser" type="map">
		<result property="depth" column="depth"/>
		<result property="aliUserId" column="aliUserId"/>
		<result property="localDateBefore" column="localDateBefore"/>
		<result property="localDateEnd" column="localDateEnd"/>
		<result property="tableName" column="tableName"/>
		<collection property="depthList" javaType="ArrayList" ofType="Map"
					select="selectDepthDailyUser" column="{depth=depth, aliUserId=aliUserId, localDateBefore=localDateBefore, localDateEnd=localDateEnd, tableName=tableName}">
			<result property="uu_id" column="uu_id" />
			<result property="name" column="name_"/>
			<result property="typeId" column="type_id"/>
			<result property="depth" column="depth"/>
		</collection>
	</resultMap>
</mapper>